# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python
pr: none
trigger:
  branches:
    include:
    - '*'

stages:
- stage: static_checks
  displayName: Static Checks
  dependsOn: []
  jobs:
    - job:
      displayName: "Check Git Tags"
      steps:
      - script: echo "##vso[build.addbuildtag]Automated"
        condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')

- stage: test_and_build
  displayName: 'Test and build'
  dependsOn: []
  jobs:
    - template: .azurePipeline/wholeBuild.yml
      parameters:
        pythonVersions: ['3.6', '3.7', '3.8', '3.9']
        operatingSystems: ['ubuntu-18.04']
        architectures: ['x64']
    - template: .azurePipeline/wholeBuild.yml
      parameters:
        pythonVersions: ['3.6', '3.7', '3.8', '3.9']
        operatingSystems: ['vs2017-win2016']
        architectures: ['x64']
    - template: .azurePipeline/wholeBuild.yml  # Template reference
      parameters:
        pythonVersions: ['3.6', '3.7', '3.8', '3.9']
        operatingSystems: ['macOS-10.14']
        architectures: ['x64']


- stage: test_notebook
  displayName: 'Test All Notebooks'
  dependsOn: []
  jobs:
    - template: .azurePipeline/testNotebook.yml
      parameters:
        pythonVersions: ['3.8']
        operatingSystems: ['ubuntu-18.04']
        architectures: ['x64']

- stage: package
  displayName: Build Wheel Packages
  dependsOn: [test_and_build]
  jobs:
    - job: linux
      pool: {vmImage: 'Ubuntu-16.04'}
      strategy:
        matrix:
          Python36:
            python.version: '3.6'
          Python37:
            python.version: '3.7'
          Python38:
            python.version: '3.8'
          Python39:
            python.version: '3.9'

      steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '$(python.version)'
          displayName: 'Use Python $(python.version)'

        - script:
            pip install wheel
          displayName: 'Install wheel'

        # artifact creation
        - script:
            python setup.py sdist bdist_wheel
          displayName: 'Artifact creation'

        # copy artifact
        - task: CopyFiles@2
          inputs:
            targetFolder: $(Build.ArtifactStagingDirectory)

        # publish artifact
        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'dist'
            publishLocation: 'Container'
